{"version":3,"sources":["components/Task.js","components/Column.js","components/Controller.js","components/App.js","serviceWorker.js","index.js"],"names":["editBtn","width","height","viewBox","className","fill","xmlns","d","fill-rule","deleteBtn","saveBtn","Task","props","task","changeTaskStatus","deleteTask","saveButton","useState","editMode","setEditMode","name","taskUpdateInput","setTasUpdateInput","Col","Card","1","2","3","priority","Button","onClick","id","type","onChange","e","target","value","CardBody","status","Column","tasks","column","deleteTasks","title","filter","el","sort","a","b","map","key","Math","random","Controller","isModalOpen","setIsModalOpen","newTitle","setNewTitle","newPriority","setNewPriority","newStatus","setNewStatus","addBtnDisabled","setBtnDisabled","Modal","isOpen","ModalHeader","ModalBody","Label","Input","placeholder","Row","required","ModalFooter","disabled","addNewTask","App","taskList","columnList","setTasks","statuses","taskPriority","newTask","taskId","direction","indexOf","newList","Container","newTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.572d41b2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Col, Card, CardBody, Button} from 'reactstrap';\r\n\r\nconst editBtn = (\r\n    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil-square\" fill=\"currentColor\"\r\n         xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n            d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\r\n        <path fill-rule=\"evenodd\"\r\n              d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/>\r\n    </svg>);\r\n\r\nconst deleteBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-x-circle\" fill=\"currentColor\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path fill-rule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\r\n    <path fill-rule=\"evenodd\" d=\"M11.854 4.146a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708-.708l7-7a.5.5 0 0 1 .708 0z\"/>\r\n    <path fill-rule=\"evenodd\" d=\"M4.146 4.146a.5.5 0 0 0 0 .708l7 7a.5.5 0 0 0 .708-.708l-7-7a.5.5 0 0 0-.708 0z\"/>\r\n</svg>);\r\n\r\nconst saveBtn = (\r\n    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-check2-circle\" fill=\"currentColor\"\r\n         xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\"\r\n              d=\"M15.354 2.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L8 9.293l6.646-6.647a.5.5 0 0 1 .708 0z\"/>\r\n        <path fill-rule=\"evenodd\"\r\n              d=\"M8 2.5A5.5 5.5 0 1 0 13.5 8a.5.5 0 0 1 1 0 6.5 6.5 0 1 1-3.25-5.63.5.5 0 1 1-.5.865A5.472 5.472 0 0 0 8 2.5z\"/>\r\n    </svg>);\r\n\r\nfunction Task(props) {\r\n    const {task, changeTaskStatus, deleteTask, saveButton} = props;\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [taskUpdateInput, setTasUpdateInput] = useState(task.name);\r\n    const alertColors = {1: 'badge badge-danger', 2: 'badge badge-warning', 3: 'badge badge-success'};\r\n    const saveButtonHandler = () => {\r\n        saveButton(task.id, taskUpdateInput);\r\n        setEditMode(false)\r\n    };\r\n\r\n    return (\r\n        <div className='card draggable'>\r\n            <Col>\r\n                <Card>\r\n                    <div className='card-header'>\r\n                        <span className={alertColors[task.priority]}>\r\n                            Priority: {task.priority}\r\n                            </span>\r\n                        {task.priority < 3 &&\r\n                        <Button className=\"btn btn-light btn-sm\"\r\n                                onClick={() => changeTaskStatus(task.id, 'down')}>↓</Button>}\r\n                        {' '}\r\n                        {task.priority > 1 &&\r\n                        <Button className=\"btn btn-light btn-sm\"\r\n                                onClick={() => changeTaskStatus(task.id, 'up')}>↑</Button>}\r\n                    </div>\r\n{/*-----------------------------------------------------------*/}\r\n                    <div className='card-body'>\r\n                        {editMode\r\n                            ? <>\r\n                                <input type='text'\r\n                                       onChange={e => setTasUpdateInput(e.target.value)}/>\r\n                                <br/>\r\n                                <button className='btn btn-outline-success btn-sm' onClick={saveButtonHandler}>{saveBtn}</button>\r\n                            </>\r\n                            : <h5 className='card-title'>{task.name}</h5>\r\n                        }\r\n                    </div>\r\n{/*----------------------------------------------------------*/}\r\n                    <CardBody>\r\n                        <p/>\r\n                        <span className='float-left'>\r\n                    {task.status !== 'todo' &&\r\n                    <button className=\"btn btn-outline-secondary btn-sm\"\r\n                            onClick={() => changeTaskStatus(task.id, 'left')}>←</button>}\r\n                            {task.status !== 'done' &&\r\n                            <button className=\"btn btn-outline-secondary btn-sm\"\r\n                                    onClick={() => changeTaskStatus(task.id, 'right')}>→</button>}\r\n                            </span>\r\n                        <p/>\r\n                        <span className='float-right'>\r\n                        <span onClick={() => deleteTask(task.id)}>{deleteBtn}</span>\r\n                            <span onClick={() => setEditMode(true)}>{editBtn}</span>\r\n                        </span>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport {Col} from 'reactstrap'\r\nimport Task from \"./Task\";\r\n\r\nfunction Column(props) {\r\n    const {tasks, changeTaskStatus, column, deleteTasks, saveButton} = props;\r\n    return (\r\n        <span className='col-sm'>\r\n        {/*<Col>*/}\r\n            <div className='card-header'>\r\n            <h3>{column.title}</h3>\r\n            </div>\r\n            <p/>\r\n            {tasks\r\n                .filter(el => el.status === column.status)\r\n                .sort((a, b) => b.priority - a.priority)\r\n                .map(el => <Task task={el} key={Math.random()} changeTaskStatus={changeTaskStatus}\r\n                                 deleteTask={deleteTasks} saveButton={saveButton}/>)}\r\n            {/*</Col>*/}\r\n\r\n    </span>\r\n    );\r\n}\r\n\r\nexport default Column;","import React, {useState} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button, Label, Input, Col, Row} from 'reactstrap'\r\n\r\nfunction Controller(props) {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [newTitle, setNewTitle] = useState('');\r\n    const [newPriority, setNewPriority] = useState(0)\r\n    const [newStatus, setNewStatus] = useState('todo')\r\n    const [addBtnDisabled, setBtnDisabled] = useState(true);\r\n    const addButtonHandler = () => {\r\n        props.addNewTask(newTitle, newPriority, newStatus)\r\n        setIsModalOpen(false)\r\n        setBtnDisabled(true)\r\n    };\r\n    const taskPriorityInput = (e) => {\r\n        setNewPriority(e.target.value)\r\n        setBtnDisabled(false)\r\n    };\r\n    const statusInput = (e) => {\r\n      setNewStatus(e.target.value)\r\n        setBtnDisabled(false)\r\n    };\r\n    return (\r\n        <>\r\n            <button className=\"btn btn-outline-dark\" onClick={() => setIsModalOpen(true)}>Add new task</button>\r\n            <Modal isOpen={isModalOpen}>\r\n                <ModalHeader>Add new task</ModalHeader>\r\n\r\n                <ModalBody>\r\n\r\n                    <Label>New Task</Label>\r\n\r\n                    <Input type='text' value={newTitle} onChange={(e) => setNewTitle(e.target.value)} placeholder='Input new task'/>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Label>Priority</Label>\r\n                            <select className='custom-select' onChange={taskPriorityInput} required>\r\n                                <option value='0'>Select Priority</option>\r\n                                <option value='3'>Low</option>\r\n                                <option value='2'>Med</option>\r\n                                <option value='1'>High</option>\r\n                            </select>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Label>Status</Label>\r\n                            <select className='custom-select' onChange={statusInput}>\r\n                                <option value={'Input Status'}>Input Status</option>\r\n                                <option value={'todo'}>To do</option>\r\n                                <option value={'progress'}>In progress</option>\r\n                                <option value={'review'}>Review</option>\r\n                                <option value={'done'}>Done</option>\r\n                            </select>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button disabled={addBtnDisabled} type='submit' onClick={addButtonHandler}>Add new task</Button>\r\n                    {' '}\r\n                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Controller;","import React, {useState} from 'react';\nimport {Container, Row} from 'reactstrap';\nimport Column from \"./Column\";\nimport Controller from \"./Controller\";\n// import AddColumnModal from \"./AddColumnModal\";\n\nfunction App() {\n    const taskList = [\n        {id: Math.random(), name: 'First task', priority: 1, status: 'todo'},\n        {id: Math.random(), name: 'Second task', priority: 1, status: 'progress'},\n        {id: Math.random(), name: 'Third task', priority: 1, status: 'review'},\n        {id: Math.random(), name: 'Fourth task', priority: 1, status: 'todo'},\n        {id: Math.random(), name: 'Fourth task', priority: 1, status: 'do again'}\n    ]\n    const columnList = [\n        {id: Math.random(), title: 'To do', status: 'todo'},\n        {id: Math.random(), title: 'In progress', status: 'progress'},\n        {id: Math.random(), title: 'Review', status: 'review'},\n        {id: Math.random(), title: 'Done', status: 'done'}\n    ]\n    const [tasks, setTasks] = useState(taskList);\n    const [column, setColumn] = useState(columnList);\n\n    const statuses = ['Input Status', 'todo', 'progress', 'review', 'done',]\n    const taskPriority = [0, 1, 2, 3];\n\n    const addNewTask = (newTitle, newPriority, newStatus) => {\n        const newTask = {\n            id: Math.random(),\n            name: newTitle,\n            priority: newPriority,\n            status: newStatus\n        }\n        const newTasks = [...tasks, newTask]\n        setTasks(newTasks);\n    };\n    const saveButton = (id, newTitle) => {\n        const newTask = tasks.map(el => {\n            if (el.id === id) {\n                return ({...el, name: newTitle})\n            } else {\n                return el;\n            }\n        })\n        setTasks(newTask);\n    };\n    // const addNewColumn = (title) => {\n    //   const newColumn = {\n    //       id: Math.random(),\n    //       title,\n    //       status: 'do again'\n    //   }\n    //   const newColumns = [...columnList, newColumn];\n    //   setColumn(newColumns)\n    // };\n\n    const changeTaskStatus = (taskId, direction) => {\n        const newTask = tasks.map(el => {\n            if (el.id === taskId) {\n                if (direction === 'right') el.status = statuses[statuses.indexOf(el.status) + 1]\n                if (direction === 'left') el.status = statuses[statuses.indexOf(el.status) - 1]\n                if (direction === 'up') el.priority = taskPriority[taskPriority.indexOf(el.priority) - 1]\n                if (direction === 'down') el.priority = taskPriority[taskPriority.indexOf(el.priority) + 1]\n            }\n            return el;\n        })\n        setTasks(newTask);\n    };\n\n    const deleteTask = (taskId) => {\n        const newList = tasks.filter(el => el.id !== taskId);\n        setTasks(newList);\n    };\n\n    return (\n        <div>\n            <Container>\n                <Controller addNewTask={addNewTask}/>\n                {/*<AddColumnModal addNewColumn={addNewColumn}/>*/}\n\n                <Row>\n                    {column.map(el => <Column column={el} key={Math.random() * 10} tasks={tasks}\n                                              changeTaskStatus={changeTaskStatus} deleteTasks={deleteTask} saveButton={saveButton}/>)}\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}